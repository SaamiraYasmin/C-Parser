# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nN9dtNGqBQbzMfgjH2ahKebdBFhmRMF6
"""

#@title Default title text
# Yacc example
 
import ply.yacc as yacc

# Get the token map from the lexer.  This is required.
from drive.MyDrive.NLP_Colab_notebooks.NLP_Project_Clang_parser.lexing import tokens

'''def p_expression_plus(p):
    'expression : expression PLUS term'
    #p[0] = p[1] + p[3]
    p[0] = ('expression_plus',p[1],p[2],p[3])

def p_expression_minus(p):
    'expression : expression MINUS term'
    #p[0] = p[1] - p[3]
    p[0] = ('expression_minus',p[1],p[2],p[3])

def p_expression_term(p):
    'expression : term'
    #p[0] = p[1]
    p[0]=('expression_term',p[1])

def p_term_times(p):
    'term : term MULT factor'
    #p[0] = p[1] * p[3]
    p[0] = ('term_mult',p[1],p[2],p[3])

def p_term_div(p):
    'term : term DIVIDE factor'
    #p[0] = p[1] / p[3]
    p[0] = ('term_divide',p[1],p[2],p[3])

def p_term_factor(p):
    'term : factor'
    #p[0] = p[1]
    p[0]=('term_factor',p[1])

def p_factor_num(p):
    'factor : NUMBER'
    #p[0] = p[1]
    p[0]=('factor_num',p[1])

def p_factor_expr(p):
    'factor : LPAREN expression RPAREN'
    #p[0] = p[2]
    p[0] = ('factor_expr',p[1],p[2],p[3])
 ''' 
def p_program(p):
  'program : hash_decls actual_code'
  p[0]=['program']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_hash_decls(p):
  '''hash_decls : lib_decls hash_decls
                | define_decls hash_decls
                | empty'''
  p[0]=['hash_decls']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_define_decls(p):
  'define_decls : HASHTAG DEFINE ID NUMBER'
  p[0]=['define_decls']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_lib_decls(p):
  'lib_decls : HASHTAG INCLUDE LESSER HEADER GREATER'
  p[0]=['lib_decls']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_actual_code(p):
  '''actual_code : structure funcn_decl main_funcn
                 | funcn_decl funcn_decl funcn_decl funcn_decl funcn_decl funcn_decl main_funcn
                 | funcn_decl main_funcn
                 | structure main_funcn
                 | main_funcn '''

  p[0] = ['actual_code']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_structure(p):
  '''structure : STRUCT ID LBRACE struct_list RBRACE struct_end
               | empty'''
  p[0] = ['structure']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_struct_list(p):
  '''struct_list : type_spec ID SEMICOLON
                 | type_spec ID SEMICOLON struct_list'''
  p[0] = ['struct_list']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_struct_end(p):
  '''struct_end : SEMICOLON
                | ID SEMICOLON'''
  p[0] = ['struct_end']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_funcn_list(p):
  '''funcn_list : funcn_decl funcn_list
                | funcn_decl'''
  p[0] = ['funcn_list']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])   

def p_funcn_decl(p):
  '''funcn_decl : type_spec ID LPAREN parms RPAREN LBRACE stmt_list RBRACE'''
  p[0] = ['funcn_decl']
  p[0].extend(p[1:])
  p[0]=tuple(p[0]) 

def p_type_spec(p):
  '''type_spec : INT
               | FLOAT
               | DOUBLE
               | CHAR
               | BOOL
               | STRUCT ID
               | VOID'''
  p[0]=['type_spec']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_main_funcn(p):
  'main_funcn : type_spec MAIN LPAREN parms RPAREN LBRACE stmt_list RBRACE'
  p[0]=['main_funcn']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_parms(p):
  '''parms : parms_list
           | empty'''
  if p[1]=='empty':
    pass
  p[0]=['parms']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_parms_list(p):
  '''parms_list : parms_list COMMA parm_decl
                | parm_decl'''
  p[0]=['parms_list']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_parm_decl(p):
  '''parm_decl : type_spec ID'''
  p[0]=['parm_decl']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_stmt_list(p):
  '''stmt_list : stmt stmt_list
               | stmt'''
  p[0]=['stmt_list']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])


def p_stmt(p):
  '''stmt : exp_stmt
			    | decl_stmt
          | assign_stmt
          | select_stmt
          | iter_stmt
          | jump_stmt
          | in_out_stmt
          | short_assign_stmt '''
  p[0] = ['stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_short_assign_stmt(p):
  '''short_assign_stmt : shortcut_assign_exp SEMICOLON'''
  p[0]=['short_assign_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_array_decl(p):
  '''array_decl : type_spec ID arr_num_list SEMICOLON'''
  p[0]=['array_decl']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_arr_num_list(p):
  '''arr_num_list : arr_num arr_num_list
                  | arr_num'''
  p[0]=['arr_num_list']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])  

def p_arr_num(p) : 
  '''arr_num : LSQBRACE arr_size RSQBRACE'''
  p[0]=['arr_num']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])  

def p_arr_size(p):
  '''arr_size : NUMBER
              | ID'''
  p[0]=['arr_size']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])   

def p_decl_stmt(p):
  '''decl_stmt : type_spec id_list SEMICOLON
               | array_decl'''
  p[0] = ['decl_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0]) 

def p_id_list(p):
  '''id_list : ID COMMA id_list
             | assign_exp COMMA id_list
             | ID
             | assign_exp'''
  p[0] = ['id_list']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_exp_stmt(p):
  '''exp_stmt : simple_exp SEMICOLON
              |  simple_exp '''
  p[0] = ['exp_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])     

def p_assign_stmt(p):
  '''assign_stmt : assign_exp
			           | assign_exp SEMICOLON '''
  p[0] = ['assign_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_struct_ID(p):
  '''struct_ID : ID DOT ID'''
  p[0] = ['struct_ID']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])


def p_assign_exp(p):
  '''assign_exp : ID EQUAL simple_exp
			          | ID EQUAL NUMBER 
                | ID EQUAL STRING
                | ID EQUAL CHAR_ID
                | ID EQUAL struct_ID
                | struct_ID EQUAL NUMBER
                | struct_ID EQUAL simple_exp
                | struct_ID EQUAL STRING
                | struct_ID EQUAL CHAR_ID'''
  p[0] = ['assign_exp']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_simple_exp(p):
  '''simple_exp : LPAREN simple_exp RPAREN
                | ID
                | cast_exp
		    	      | numerical_exp
                | shift_exp
                | relational_exp
                | logical_exp
                | shortcut_assign_exp
                | funcn_call '''
  p[0] = ['simple_exp']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_funcn_call(p):
  '''funcn_call : ID LPAREN id_list RPAREN SEMICOLON
                | ID LPAREN id_list RPAREN'''
  p[0] = ['funcn_call']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_shortcut_assign_exp(p):
  '''shortcut_assign_exp : ID PLUS PLUS
                         | PLUS PLUS ID
                         | MINUS MINUS ID
                         | ID MINUS MINUS
                         | ID short_assigner simple_exp
                         | ID short_assigner NUMBER'''
  p[0] = ['shortcut_assign_exp']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_short_assigner(p):
  '''short_assigner : MULT EQUAL
                    | PLUS EQUAL
                    | MINUS EQUAL
                    | REMINDER EQUAL
                    | DIVIDE EQUAL'''
  p[0] = ['short_assigner']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_cast_exp(p):
  '''cast_exp : LPAREN type_spec RPAREN simple_exp '''	
  p[0] = ['cast_exp']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_numerical_exp(p):
  ''' numerical_exp : LPAREN numerical_exp RPAREN
                    | simple_exp num_operator simple_exp 
                    | ID num_operator ID
                    | NUMBER num_operator NUMBER
                    | ID num_operator NUMBER
                    | NUMBER num_operator ID '''
  p[0] = ['numerical_exp']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_num_operator(p):
  '''num_operator : PLUS
                  | MINUS
                  | MULT
                  | REMINDER
                  | DIVIDE'''
  p[0] = ['num_operator']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_shift_exp(p):
  '''shift_exp : LPAREN shift_exp RPAREN
               |  ID sh_operator ID
               | NUMBER sh_operator NUMBER
               | ID sh_operator NUMBER
               | NUMBER sh_operator ID '''
  p[0] = ['shift_exp']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_sh_operator(p):
  '''sh_operator : LESSER LESSER
                 | GREATER GREATER	'''
  p[0] = ['sh_operator']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_relational_exp(p):
  '''relational_exp : LPAREN relational_exp RPAREN
                    | simple_exp rel_operator  simple_exp 
                    | ID rel_operator ID
                    | NUMBER rel_operator NUMBER
                    | ID rel_operator NUMBER
                    | NUMBER rel_operator ID'''
  p[0] = ['relational_exp']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_rel_operator(p):
  '''rel_operator : GREATER
                  | GREATER EQUAL
                  | LESSER 
                  | LESSER EQUAL
                  | EQUAL EQUAL
                  | NOT EQUAL '''
  p[0] = ['rel_operator']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_logical_exp(p):
  '''logical_exp : LPAREN logical_exp RPAREN
                 | simple_exp log_operator  simple_exp 
                 | ID log_operator ID
                 | NUMBER log_operator NUMBER
                 | ID log_operator NUMBER
                 | NUMBER log_operator ID '''
  p[0] = ['logical_exp']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_log_operator(p):
  '''log_operator : AND AND
			            | OR OR '''
  p[0] = ['log_operator']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_iter_stmt(p):
  '''iter_stmt : for_stmt
               | while_stmt 
               | do_while_stmt '''

  p[0] = ['iter_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_for_stmt(p): 
  '''for_stmt : FOR LPAREN for_decl RPAREN LBRACE stmt_list RBRACE
              | FOR LPAREN for_decl RPAREN SEMICOLON'''
  p[0]=['for_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])                  

def p_for_decl(p):
  '''for_decl : for_init SEMICOLON for_cond SEMICOLON for_updt'''
  p[0]=['for_decl']
  p[0].extend(p[1:])
  p[0]=tuple(p[0]) 

def p_for_init_single(p):
  '''for_init_single : type_spec assign_exp
                     | assign_exp
                     | empty'''
  p[0]=['for_init_single']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_for_cond(p):
  '''for_cond : simple_exp
              | simple_exp COMMA for_cond'''
  p[0]=['for_cond']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_for_init(p):
  '''for_init : for_init_single COMMA for_init
              | for_init_single'''
  p[0]=['for_init']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_for_updt_single(p):
  '''for_updt_single : shortcut_assign_exp
                     | ID EQUAL simple_exp
                     | empty'''
  p[0]=['for_updt_single']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def  p_for_updt(p):
  '''for_updt : for_updt_single COMMA for_updt
              | for_updt_single'''
  p[0]=['for_updt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_while_stmt(p):
  '''while_stmt : WHILE LPAREN simple_exp RPAREN LBRACE stmt_list RBRACE
                | WHILE LPAREN simple_exp RPAREN SEMICOLON'''
  p[0]=['while_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_do_while_stmt(p):
  '''do_while_stmt : DO LBRACE stmt_list RBRACE WHILE LPAREN simple_exp RPAREN SEMICOLON'''
  p[0]=['do_while_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])


def p_select_stmt(p):
  '''select_stmt : if_stmt_decl
                 | ifelse_stmt_decl
	               | if_elif_else_decl
	               | switch_stmt'''
  p[0]=['select_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])           

def p_if_stmt_decl(p):
  '''if_stmt_decl : if_stmt'''
  p[0]=['if_stmt_decl']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_ifelse_stmt_decl(p):
  '''ifelse_stmt_decl : if_stmt else_stmt'''
  p[0]=['ifelse_stmt_decl']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_if_elif_else_decl(p):
  '''if_elif_else_decl : if_stmt else_if_stmt else_stmt 
                       | if_stmt else_if_stmt'''
  p[0]=['if_elif_else_decl']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_if_stmt(p):
  '''if_stmt : IF LPAREN simple_exp RPAREN LBRACE stmt_list RBRACE'''
  p[0]=['If_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_else_if_stmt(p):
  '''else_if_stmt : ELSE IF LPAREN simple_exp RPAREN LBRACE stmt_list RBRACE'''
  p[0]=['else_if_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_else_stmt(p):
  '''else_stmt : ELSE LBRACE stmt_list RBRACE'''
  p[0]=['else_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_switch_stmt(p):
  '''switch_stmt : SWITCH LPAREN simple_exp RPAREN LBRACE s_stmt RBRACE'''
  p[0]=['switch_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_s_stmt(p):
  '''s_stmt : case_stmt_list default_stmt'''
  p[0]=['s_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_case_stmt_list(p):
  '''case_stmt_list : case_stmt case_stmt_list 
                    | case_stmt'''
  p[0]=['case_stmt_list']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_case_stmt(p):
  '''case_stmt : CASE switch_value COLON stmt_list'''
  p[0]=['case_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0]) 

def p_switch_value(p):
  '''switch_value : NUMBER
                  | CHAR_ID'''
  p[0]=['switch_value']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])                               

#def p_end_stmt(p):
  '''end_stmt : BREAK SEMICOLON'''
  '''p[0]=['end_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])  '''           

def p_default_stmt(p):
  '''default_stmt : DEFAULT COLON stmt_list'''
  p[0]=['default_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0]) 

def p_jump_stmt(p):
  '''jump_stmt : CONTINUE SEMICOLON
               | BREAK SEMICOLON
               | RETURN simple_exp SEMICOLON
               | RETURN NUMBER SEMICOLON '''
  p[0] = ['jump_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])             

def p_in_out_stmt(p):
  '''in_out_stmt : PRINTF LPAREN STRING out_list RPAREN SEMICOLON 
                 | SCANF LPAREN STRING in_list RPAREN SEMICOLON'''
  p[0] = ['in_out_stmt']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_out_list(p):
  '''out_list : out_var out_list
              | out_var 
              | empty'''

  p[0] = ['out_list']
  p[0].extend(p[1:])
  p[0]=tuple(p[0])

def p_out_var(p):
  '''out_var : COMMA ID
             | COMMA simple_exp '''
  p[0] = ['out_var']
  p[0].extend(p[1:])
  p[0]=tuple(p[0]) 

def p_in_list(p):
  '''in_list : in_var in_list
             | in_var '''
  p[0] = ['in_list']
  p[0].extend(p[1:])
  p[0]=tuple(p[0]) 

def p_in_var(p):
  '''in_var : COMMA AND ID''' 
  p[0] = ['in_var']
  p[0].extend(p[1:])
  p[0]=tuple(p[0]) 
  
def p_empty(p):
  'empty :'
  pass
# Error rule for syntax errors
def p_error(p):
    print("Syntax error in input!")

# Build the parser
parser = yacc.yacc()